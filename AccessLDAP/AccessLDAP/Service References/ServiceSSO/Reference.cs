//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AccessLDAP.ServiceSSO {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SSOUserAlreadyExistsException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    [System.SerializableAttribute()]
    public partial class SSOUserAlreadyExistsException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserDTO", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    [System.SerializableAttribute()]
    public partial class UserDTO : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<bool> IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<bool> IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AuthenticatedUser", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    [System.SerializableAttribute()]
    public partial class AuthenticatedUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreatedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private long IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLockOutDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastLoginDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastPasswordChangeDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string newPasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string oldPasswordField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreatedDate {
            get {
                return this.CreatedDateField;
            }
            set {
                if ((this.CreatedDateField.Equals(value) != true)) {
                    this.CreatedDateField = value;
                    this.RaisePropertyChanged("CreatedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public long Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsActive {
            get {
                return this.IsActiveField;
            }
            set {
                if ((this.IsActiveField.Equals(value) != true)) {
                    this.IsActiveField = value;
                    this.RaisePropertyChanged("IsActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLockOutDate {
            get {
                return this.LastLockOutDateField;
            }
            set {
                if ((this.LastLockOutDateField.Equals(value) != true)) {
                    this.LastLockOutDateField = value;
                    this.RaisePropertyChanged("LastLockOutDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastLoginDate {
            get {
                return this.LastLoginDateField;
            }
            set {
                if ((this.LastLoginDateField.Equals(value) != true)) {
                    this.LastLoginDateField = value;
                    this.RaisePropertyChanged("LastLoginDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastPasswordChangeDate {
            get {
                return this.LastPasswordChangeDateField;
            }
            set {
                if ((this.LastPasswordChangeDateField.Equals(value) != true)) {
                    this.LastPasswordChangeDateField = value;
                    this.RaisePropertyChanged("LastPasswordChangeDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string newPassword {
            get {
                return this.newPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.newPasswordField, value) != true)) {
                    this.newPasswordField = value;
                    this.RaisePropertyChanged("newPassword");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string oldPassword {
            get {
                return this.oldPasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.oldPasswordField, value) != true)) {
                    this.oldPasswordField = value;
                    this.RaisePropertyChanged("oldPassword");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SSOUserDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    [System.SerializableAttribute()]
    public partial class SSOUserDoesNotExistException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SSOInvalidPasswordException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    [System.SerializableAttribute()]
    public partial class SSOInvalidPasswordException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordResetResultType", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
    public enum PasswordResetResultType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmailNotFound = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Successful = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Error = 3,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceSSO.ISSO")]
    public interface ISSO {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/CreateUser", ReplyAction="http://tempuri.org/ISSO/CreateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AccessLDAP.ServiceSSO.SSOUserAlreadyExistsException), Action="http://tempuri.org/ISSO/CreateUserSSOUserAlreadyExistsExceptionFault", Name="SSOUserAlreadyExistsException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
        bool CreateUser(string userName, string password, string eMail, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/CreateUser", ReplyAction="http://tempuri.org/ISSO/CreateUserResponse")]
        System.Threading.Tasks.Task<bool> CreateUserAsync(string userName, string password, string eMail, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/DeleteUser", ReplyAction="http://tempuri.org/ISSO/DeleteUserResponse")]
        bool DeleteUser(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/DeleteUser", ReplyAction="http://tempuri.org/ISSO/DeleteUserResponse")]
        System.Threading.Tasks.Task<bool> DeleteUserAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/UserExists", ReplyAction="http://tempuri.org/ISSO/UserExistsResponse")]
        bool UserExists(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/UserExists", ReplyAction="http://tempuri.org/ISSO/UserExistsResponse")]
        System.Threading.Tasks.Task<bool> UserExistsAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/ChangePassword", ReplyAction="http://tempuri.org/ISSO/ChangePasswordResponse")]
        bool ChangePassword(string userName, string oldPaassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/ChangePassword", ReplyAction="http://tempuri.org/ISSO/ChangePasswordResponse")]
        System.Threading.Tasks.Task<bool> ChangePasswordAsync(string userName, string oldPaassword, string newPassword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUsers", ReplyAction="http://tempuri.org/ISSO/GetUsersResponse")]
        AccessLDAP.ServiceSSO.UserDTO[] GetUsers(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUsers", ReplyAction="http://tempuri.org/ISSO/GetUsersResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> GetUsersAsync(int index, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetAllUsers", ReplyAction="http://tempuri.org/ISSO/GetAllUsersResponse")]
        AccessLDAP.ServiceSSO.UserDTO[] GetAllUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetAllUsers", ReplyAction="http://tempuri.org/ISSO/GetAllUsersResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> GetAllUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByName", ReplyAction="http://tempuri.org/ISSO/GetUserByNameResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AccessLDAP.ServiceSSO.SSOUserDoesNotExistException), Action="http://tempuri.org/ISSO/GetUserByNameSSOUserDoesNotExistExceptionFault", Name="SSOUserDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
        AccessLDAP.ServiceSSO.AuthenticatedUser GetUserByName(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByName", ReplyAction="http://tempuri.org/ISSO/GetUserByNameResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.AuthenticatedUser> GetUserByNameAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByEmail", ReplyAction="http://tempuri.org/ISSO/GetUserByEmailResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AccessLDAP.ServiceSSO.SSOUserDoesNotExistException), Action="http://tempuri.org/ISSO/GetUserByEmailSSOUserDoesNotExistExceptionFault", Name="SSOUserDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
        AccessLDAP.ServiceSSO.AuthenticatedUser GetUserByEmail(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByEmail", ReplyAction="http://tempuri.org/ISSO/GetUserByEmailResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.AuthenticatedUser> GetUserByEmailAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByID", ReplyAction="http://tempuri.org/ISSO/GetUserByIDResponse")]
        AccessLDAP.ServiceSSO.UserDTO GetUserByID(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetUserByID", ReplyAction="http://tempuri.org/ISSO/GetUserByIDResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO> GetUserByIDAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/FindUsersByEmail", ReplyAction="http://tempuri.org/ISSO/FindUsersByEmailResponse")]
        AccessLDAP.ServiceSSO.UserDTO[] FindUsersByEmail(string EmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/FindUsersByEmail", ReplyAction="http://tempuri.org/ISSO/FindUsersByEmailResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> FindUsersByEmailAsync(string EmailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/FindUsersByName", ReplyAction="http://tempuri.org/ISSO/FindUsersByNameResponse")]
        AccessLDAP.ServiceSSO.UserDTO[] FindUsersByName(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/FindUsersByName", ReplyAction="http://tempuri.org/ISSO/FindUsersByNameResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> FindUsersByNameAsync(string UserName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/SignIn", ReplyAction="http://tempuri.org/ISSO/SignInResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(AccessLDAP.ServiceSSO.SSOInvalidPasswordException), Action="http://tempuri.org/ISSO/SignInSSOInvalidPasswordExceptionFault", Name="SSOInvalidPasswordException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
        [System.ServiceModel.FaultContractAttribute(typeof(AccessLDAP.ServiceSSO.SSOUserDoesNotExistException), Action="http://tempuri.org/ISSO/SignInSSOUserDoesNotExistExceptionFault", Name="SSOUserDoesNotExistException", Namespace="http://schemas.datacontract.org/2004/07/AccessLDAP.Common")]
        bool SignIn(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/SignIn", ReplyAction="http://tempuri.org/ISSO/SignInResponse")]
        System.Threading.Tasks.Task<bool> SignInAsync(string userName, string password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/SignOut", ReplyAction="http://tempuri.org/ISSO/SignOutResponse")]
        bool SignOut(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/SignOut", ReplyAction="http://tempuri.org/ISSO/SignOutResponse")]
        System.Threading.Tasks.Task<bool> SignOutAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/IsAuthenticated", ReplyAction="http://tempuri.org/ISSO/IsAuthenticatedResponse")]
        bool IsAuthenticated(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/IsAuthenticated", ReplyAction="http://tempuri.org/ISSO/IsAuthenticatedResponse")]
        System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string userName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/ResetPassword", ReplyAction="http://tempuri.org/ISSO/ResetPasswordResponse")]
        AccessLDAP.ServiceSSO.PasswordResetResultType ResetPassword(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/ResetPassword", ReplyAction="http://tempuri.org/ISSO/ResetPasswordResponse")]
        System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.PasswordResetResultType> ResetPasswordAsync(string emailAddress);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetOnlineCount", ReplyAction="http://tempuri.org/ISSO/GetOnlineCountResponse")]
        int GetOnlineCount();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/GetOnlineCount", ReplyAction="http://tempuri.org/ISSO/GetOnlineCountResponse")]
        System.Threading.Tasks.Task<int> GetOnlineCountAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/UpdateUser", ReplyAction="http://tempuri.org/ISSO/UpdateUserResponse")]
        bool UpdateUser(string userName, string password, string eMail, bool isActive);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISSO/UpdateUser", ReplyAction="http://tempuri.org/ISSO/UpdateUserResponse")]
        System.Threading.Tasks.Task<bool> UpdateUserAsync(string userName, string password, string eMail, bool isActive);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ISSOChannel : AccessLDAP.ServiceSSO.ISSO, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SSOClient : System.ServiceModel.ClientBase<AccessLDAP.ServiceSSO.ISSO>, AccessLDAP.ServiceSSO.ISSO {
        
        public SSOClient() {
        }
        
        public SSOClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public SSOClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SSOClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public SSOClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool CreateUser(string userName, string password, string eMail, bool isActive) {
            return base.Channel.CreateUser(userName, password, eMail, isActive);
        }
        
        public System.Threading.Tasks.Task<bool> CreateUserAsync(string userName, string password, string eMail, bool isActive) {
            return base.Channel.CreateUserAsync(userName, password, eMail, isActive);
        }
        
        public bool DeleteUser(string userName) {
            return base.Channel.DeleteUser(userName);
        }
        
        public System.Threading.Tasks.Task<bool> DeleteUserAsync(string userName) {
            return base.Channel.DeleteUserAsync(userName);
        }
        
        public bool UserExists(string userName) {
            return base.Channel.UserExists(userName);
        }
        
        public System.Threading.Tasks.Task<bool> UserExistsAsync(string userName) {
            return base.Channel.UserExistsAsync(userName);
        }
        
        public bool ChangePassword(string userName, string oldPaassword, string newPassword) {
            return base.Channel.ChangePassword(userName, oldPaassword, newPassword);
        }
        
        public System.Threading.Tasks.Task<bool> ChangePasswordAsync(string userName, string oldPaassword, string newPassword) {
            return base.Channel.ChangePasswordAsync(userName, oldPaassword, newPassword);
        }
        
        public AccessLDAP.ServiceSSO.UserDTO[] GetUsers(int index, int count) {
            return base.Channel.GetUsers(index, count);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> GetUsersAsync(int index, int count) {
            return base.Channel.GetUsersAsync(index, count);
        }
        
        public AccessLDAP.ServiceSSO.UserDTO[] GetAllUsers() {
            return base.Channel.GetAllUsers();
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> GetAllUsersAsync() {
            return base.Channel.GetAllUsersAsync();
        }
        
        public AccessLDAP.ServiceSSO.AuthenticatedUser GetUserByName(string userName) {
            return base.Channel.GetUserByName(userName);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.AuthenticatedUser> GetUserByNameAsync(string userName) {
            return base.Channel.GetUserByNameAsync(userName);
        }
        
        public AccessLDAP.ServiceSSO.AuthenticatedUser GetUserByEmail(string emailAddress) {
            return base.Channel.GetUserByEmail(emailAddress);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.AuthenticatedUser> GetUserByEmailAsync(string emailAddress) {
            return base.Channel.GetUserByEmailAsync(emailAddress);
        }
        
        public AccessLDAP.ServiceSSO.UserDTO GetUserByID(int id) {
            return base.Channel.GetUserByID(id);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO> GetUserByIDAsync(int id) {
            return base.Channel.GetUserByIDAsync(id);
        }
        
        public AccessLDAP.ServiceSSO.UserDTO[] FindUsersByEmail(string EmailAddress) {
            return base.Channel.FindUsersByEmail(EmailAddress);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> FindUsersByEmailAsync(string EmailAddress) {
            return base.Channel.FindUsersByEmailAsync(EmailAddress);
        }
        
        public AccessLDAP.ServiceSSO.UserDTO[] FindUsersByName(string UserName) {
            return base.Channel.FindUsersByName(UserName);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.UserDTO[]> FindUsersByNameAsync(string UserName) {
            return base.Channel.FindUsersByNameAsync(UserName);
        }
        
        public bool SignIn(string userName, string password) {
            return base.Channel.SignIn(userName, password);
        }
        
        public System.Threading.Tasks.Task<bool> SignInAsync(string userName, string password) {
            return base.Channel.SignInAsync(userName, password);
        }
        
        public bool SignOut(string userName) {
            return base.Channel.SignOut(userName);
        }
        
        public System.Threading.Tasks.Task<bool> SignOutAsync(string userName) {
            return base.Channel.SignOutAsync(userName);
        }
        
        public bool IsAuthenticated(string userName) {
            return base.Channel.IsAuthenticated(userName);
        }
        
        public System.Threading.Tasks.Task<bool> IsAuthenticatedAsync(string userName) {
            return base.Channel.IsAuthenticatedAsync(userName);
        }
        
        public AccessLDAP.ServiceSSO.PasswordResetResultType ResetPassword(string emailAddress) {
            return base.Channel.ResetPassword(emailAddress);
        }
        
        public System.Threading.Tasks.Task<AccessLDAP.ServiceSSO.PasswordResetResultType> ResetPasswordAsync(string emailAddress) {
            return base.Channel.ResetPasswordAsync(emailAddress);
        }
        
        public int GetOnlineCount() {
            return base.Channel.GetOnlineCount();
        }
        
        public System.Threading.Tasks.Task<int> GetOnlineCountAsync() {
            return base.Channel.GetOnlineCountAsync();
        }
        
        public bool UpdateUser(string userName, string password, string eMail, bool isActive) {
            return base.Channel.UpdateUser(userName, password, eMail, isActive);
        }
        
        public System.Threading.Tasks.Task<bool> UpdateUserAsync(string userName, string password, string eMail, bool isActive) {
            return base.Channel.UpdateUserAsync(userName, password, eMail, isActive);
        }
    }
}
